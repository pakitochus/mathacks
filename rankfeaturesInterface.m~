function [IDX,Z]=rankfeaturesInterface(data, group, criterion)
% RANKFEATURESINTERFACE provides an interface to integrate other filtering
% methods than the five included in RankFeatures, such as FDR or the method
% proposed in [1], where a pvalue is estimated using experimental accuracy
% and SVM.
%
% [1] Quentin Noirhomme et al. Biased binomial assessment of
% cross-validated estimation of classification accuracies illustrated in
% diagnosis predictions. NeuroImage: Clinical 4 (2014) 687â€“694.
%

originals={'wilcoxon', 'entropy', 'roc', 'bhattacharyya'};
new={'ttest','fdr','pvalue','none'};
[N,M]=size(data);
if(any(strcmp(criterion, originals)))
    [IDX,Z]=rankfeatures(data', group, 'Criterion',criterion);
    Z(isnan(Z))=0;
elseif(any(strcmp(criterion,new)))
    switch(criterion)
        case 'ttest'
            [~,~,~,stats]=ttest2(data(~group,:),data(group,:));
            Z=stats.tstat';
            Z(isnan(Z))=0;
            [~, IDX]= sort(abs(Z),'descend');
        case 'fdr'
            Z = fdr(data, group)';
            Z(isnan(Z))=0;
            [~, IDX]= sort(Z,'descend');
        case 'none'
            IDX=1:M;
            %             IDX=size(data,2):-1:1;
        case 'pvalue'
            for 
%             group=double(group);
%             Z=zeros(M,1);
%             for i=1:M;
%                 lambda = data(:,i);
%                 model = svmtrain(group,lambda,'-t 0 -q');
%                 [predicted, ~,~] = svmpredict(group, lambda, model,'-q');
%                 realacc=sum((predicted>0) ==group)/N;
%                 jral=100;
%                 fakeacc=zeros(1,jral);
%                 for iter=1:jral
%                     fakegroup=group(randperm(N));
%                     svm=svmtrain(fakegroup,lambda,'-t 0 -q');
%                     predicted = svmpredict(fakegroup, lambda, svm,'-q');
%                     fakeacc(iter)=sum((predicted>0) ==fakegroup)/N;
%                 end
%                 fprintf('.')
%                 Z(i)=sum(fakeacc>=realacc)/jral;
%             end
%             [~, IDX]= sort(Z,'ascend');
    end
else
    error('Valid criterion not introduced');
end
end

function [ fdr ] = fdr(data,labels)
%FDR compute point by point fisher discriminant ratio
% [ fdr ] = fdr(data,labels)
%  data: array of 2 dimentions, fdr is computed along the first dimention
%   labels: binary labels
% note: computations are tolerant to NANs



%compute FDR
m0=nanmean(data(find(labels),:),1);%means for sane group
v0=nanvar(double(data(find(labels),:)),0,1);%variance for sane group
m1=nanmean(data(find(~labels),:),1);%means for AD group
v1=nanvar(double(data(find(~labels),:)),0,1);%covariance for AD group
fdr=((m0-m1)).^2./(v1+v0);%compute Fisher Discriminant Ratio



end

